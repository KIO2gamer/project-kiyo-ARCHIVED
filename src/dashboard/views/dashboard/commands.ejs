<%- include('../layout', { title: 'Commands - Project Kiyo Dashboard' }) %>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-terminal me-2"></i>Command Management</h2>
    <div>
        <button class="btn btn-outline-primary me-2" id="filter-btn">
            <i class="fas fa-filter me-2"></i>Filter
        </button>
        <button class="btn btn-primary" data-action="refresh-commands">
            <i class="fas fa-sync-alt me-2"></i>Refresh
        </button>
    </div>
</div>

<!-- Command Stats -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-terminal fa-2x text-primary mb-2"></i>
                <h4 id="total-commands">-</h4>
                <small class="text-muted">Total Commands</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-check-circle fa-2x text-success mb-2"></i>
                <h4 id="enabled-commands">-</h4>
                <small class="text-muted">Enabled</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-times-circle fa-2x text-danger mb-2"></i>
                <h4 id="disabled-commands">-</h4>
                <small class="text-muted">Disabled</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-layer-group fa-2x text-info mb-2"></i>
                <h4 id="total-categories">-</h4>
                <small class="text-muted">Categories</small>
            </div>
        </div>
    </div>
</div>

<!-- Filter Controls -->
<div class="card mb-4" id="filter-panel" style="display: none;">
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <label class="form-label">Category</label>
                <select class="form-select" id="category-filter">
                    <option value="">All Categories</option>
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label">Status</label>
                <select class="form-select" id="status-filter">
                    <option value="">All Commands</option>
                    <option value="enabled">Enabled</option>
                    <option value="disabled">Disabled</option>
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label">Search</label>
                <input type="text" class="form-control" id="search-filter" placeholder="Search commands...">
            </div>
        </div>
    </div>
</div>

<!-- Commands List -->
<div class="card">
    <div class="card-header">
        <h5 class="mb-0">Available Commands</h5>
    </div>
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-hover mb-0">
                <thead class="table-light">
                    <tr>
                        <th>Command</th>
                        <th>Category</th>
                        <th>Description</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="commands-table-body">
                    <tr>
                        <td colspan="5" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading commands...</span>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Command Details Modal -->
<div class="modal fade" id="commandModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Command Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <!-- Content will be loaded dynamically -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="save-command-btn">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<script>
class CommandManager {
    constructor() {
        this.commands = [];
        this.filteredCommands = [];
        this.categories = new Set();
        this.init();
    }

    async init() {
        await this.loadCommands();
        this.setupEventListeners();
        this.setupFilters();
    }

    async loadCommands() {
        try {
            const response = await fetch('/api/commands');
            this.commands = await response.json();
            this.processCommands();
            this.renderCommands();
            this.updateStats();
        } catch (error) {
            console.error('Error loading commands:', error);
            this.showError('Failed to load commands');
        }
    }

    processCommands() {
        this.categories.clear();
        this.commands.forEach(cmd => {
            if (cmd.category) {
                this.categories.add(cmd.category);
            }
            // Add default status if not present
            if (!cmd.status) {
                cmd.status = 'enabled';
            }
        });
        this.filteredCommands = [...this.commands];
    }

    renderCommands() {
        const tbody = document.getElementById('commands-table-body');
        
        if (this.filteredCommands.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="5" class="text-center py-4">
                        <i class="fas fa-search fa-2x text-muted mb-2"></i>
                        <p class="text-muted mb-0">No commands found matching your criteria</p>
                    </td>
                </tr>
            `;
            return;
        }

        const rows = this.filteredCommands.map(cmd => this.createCommandRow(cmd)).join('');
        tbody.innerHTML = rows;
    }

    createCommandRow(command) {
        const statusClass = command.status === 'enabled' ? 'success' : 'danger';
        const statusIcon = command.status === 'enabled' ? 'check-circle' : 'times-circle';
        
        return `
            <tr data-command="${command.name}">
                <td>
                    <div class="d-flex align-items-center">
                        <i class="fas fa-terminal text-muted me-2"></i>
                        <div>
                            <strong>/${command.name}</strong>
                        </div>
                    </div>
                </td>
                <td>
                    <span class="badge bg-secondary">${this.formatCategory(command.category)}</span>
                </td>
                <td>
                    <span class="text-muted">${this.escapeHtml(command.description)}</span>
                </td>
                <td>
                    <span class="badge bg-${statusClass}">
                        <i class="fas fa-${statusIcon} me-1"></i>
                        ${command.status}
                    </span>
                </td>
                <td>
                    <div class="btn-group btn-group-sm">
                        <button class="btn btn-outline-primary" onclick="commandManager.viewCommand('${command.name}')">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-outline-secondary" onclick="commandManager.configureCommand('${command.name}')">
                            <i class="fas fa-cog"></i>
                        </button>
                        <button class="btn btn-outline-${command.status === 'enabled' ? 'danger' : 'success'}" 
                                onclick="commandManager.toggleCommand('${command.name}')">
                            <i class="fas fa-${command.status === 'enabled' ? 'times' : 'check'}"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
    }

    updateStats() {
        const totalCommands = this.commands.length;
        const enabledCommands = this.commands.filter(cmd => cmd.status === 'enabled').length;
        const disabledCommands = totalCommands - enabledCommands;
        const totalCategories = this.categories.size;

        document.getElementById('total-commands').textContent = totalCommands;
        document.getElementById('enabled-commands').textContent = enabledCommands;
        document.getElementById('disabled-commands').textContent = disabledCommands;
        document.getElementById('total-categories').textContent = totalCategories;
    }

    setupFilters() {
        const categoryFilter = document.getElementById('category-filter');
        
        // Populate category filter
        this.categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = this.formatCategory(category);
            categoryFilter.appendChild(option);
        });
    }

    applyFilters() {
        const categoryFilter = document.getElementById('category-filter').value;
        const statusFilter = document.getElementById('status-filter').value;
        const searchFilter = document.getElementById('search-filter').value.toLowerCase();

        this.filteredCommands = this.commands.filter(cmd => {
            const matchesCategory = !categoryFilter || cmd.category === categoryFilter;
            const matchesStatus = !statusFilter || cmd.status === statusFilter;
            const matchesSearch = !searchFilter || 
                cmd.name.toLowerCase().includes(searchFilter) ||
                cmd.description.toLowerCase().includes(searchFilter);

            return matchesCategory && matchesStatus && matchesSearch;
        });

        this.renderCommands();
    }

    setupEventListeners() {
        // Filter toggle
        document.getElementById('filter-btn').addEventListener('click', () => {
            const panel = document.getElementById('filter-panel');
            panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
        });

        // Filter inputs
        ['category-filter', 'status-filter', 'search-filter'].forEach(id => {
            document.getElementById(id).addEventListener('change', () => this.applyFilters());
            document.getElementById(id).addEventListener('input', () => this.applyFilters());
        });

        // Refresh button
        document.addEventListener('click', (e) => {
            if (e.target.closest('[data-action="refresh-commands"]')) {
                this.loadCommands();
            }
        });
    }

    viewCommand(commandName) {
        const command = this.commands.find(cmd => cmd.name === commandName);
        if (!command) return;

        const modal = new bootstrap.Modal(document.getElementById('commandModal'));
        const modalTitle = document.querySelector('#commandModal .modal-title');
        const modalBody = document.querySelector('#commandModal .modal-body');

        modalTitle.textContent = `/${command.name}`;
        modalBody.innerHTML = this.renderCommandDetails(command);
        modal.show();
    }

    renderCommandDetails(command) {
        return `
            <div class="row">
                <div class="col-md-6">
                    <h6>Basic Information</h6>
                    <table class="table table-sm">
                        <tr>
                            <td><strong>Name:</strong></td>
                            <td>/${command.name}</td>
                        </tr>
                        <tr>
                            <td><strong>Category:</strong></td>
                            <td>${this.formatCategory(command.category)}</td>
                        </tr>
                        <tr>
                            <td><strong>Status:</strong></td>
                            <td>
                                <span class="badge bg-${command.status === 'enabled' ? 'success' : 'danger'}">
                                    ${command.status}
                                </span>
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="col-md-6">
                    <h6>Description</h6>
                    <p class="text-muted">${this.escapeHtml(command.description)}</p>
                    
                    ${command.options && command.options.length > 0 ? `
                        <h6>Options</h6>
                        <ul class="list-unstyled">
                            ${command.options.map(option => `
                                <li class="mb-1">
                                    <code>${option.name}</code> - ${option.description}
                                    ${option.required ? '<span class="badge bg-warning ms-1">Required</span>' : ''}
                                </li>
                            `).join('')}
                        </ul>
                    ` : ''}
                </div>
            </div>
        `;
    }

    configureCommand(commandName) {
        // This would open a configuration modal
        alert(`Configuration for /${commandName} will be available in a future update.`);
    }

    async toggleCommand(commandName) {
        const command = this.commands.find(cmd => cmd.name === commandName);
        if (!command) return;

        const newStatus = command.status === 'enabled' ? 'disabled' : 'enabled';
        
        try {
            // This would make an API call to toggle the command
            // For now, just update locally
            command.status = newStatus;
            this.renderCommands();
            this.updateStats();
            
            dashboard.showAlert('success', `Command /${commandName} ${newStatus}`);
        } catch (error) {
            dashboard.showAlert('danger', `Failed to ${newStatus === 'enabled' ? 'enable' : 'disable'} command`);
        }
    }

    formatCategory(category) {
        if (!category) return 'Uncategorized';
        return category.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    showError(message) {
        const tbody = document.getElementById('commands-table-body');
        tbody.innerHTML = `
            <tr>
                <td colspan="5" class="text-center py-4">
                    <div class="alert alert-danger mb-0">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        ${message}
                    </div>
                </td>
            </tr>
        `;
    }
}

// Initialize when page loads
document.addEventListener('DOMContentLoaded', function() {
    window.commandManager = new CommandManager();
});
</script>