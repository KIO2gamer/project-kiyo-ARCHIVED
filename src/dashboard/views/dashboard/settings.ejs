<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Settings - <%= guild.name %> - Kiyo Dashboard</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="/css/style.css">
</head>
<body>
  <%- include('../partials/navbar') %>
  
  <div class="container py-4">
    <div class="row mb-4">
      <div class="col-md-12">
        <nav aria-label="breadcrumb">
          <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/dashboard">Dashboard</a></li>
            <li class="breadcrumb-item"><a href="/dashboard/servers/<%= guild.id %>"><%= guild.name %></a></li>
            <li class="breadcrumb-item active" aria-current="page">Settings</li>
          </ol>
        </nav>
        
        <h1>Settings</h1>
        <p class="lead">Configure bot settings for <%= guild.name %></p>
      </div>
    </div>
    
    <div class="row">
      <div class="col-md-12">
        <div class="card">
          <div class="card-header">
            <ul class="nav nav-tabs card-header-tabs">
              <li class="nav-item">
                <a class="nav-link" href="/dashboard/servers/<%= guild.id %>">Overview</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/dashboard/servers/<%= guild.id %>/commands">Commands</a>
              </li>
              <li class="nav-item">
                <a class="nav-link active" href="#">Settings</a>
              </li>
            </ul>
          </div>
          <div class="card-body">
            <form id="settingsForm">
              <!-- General Settings -->
              <div class="mb-4">
                <h3>General Settings</h3>
                <div class="mb-3">
                  <label for="prefix" class="form-label">Custom Prefix</label>
                  <input type="text" class="form-control" id="prefix" name="prefix" placeholder="!" value="<%= settings?.prefix || '!' %>">
                  <div class="form-text">The prefix used for text commands (slash commands will still work)</div>
                </div>
                
                <div class="form-check form-switch mb-3">
                  <input class="form-check-input" type="checkbox" id="deleteCommands" name="deleteCommands" <%= settings?.deleteCommands ? 'checked' : '' %>>
                  <label class="form-check-label" for="deleteCommands">Auto-delete command messages</label>
                </div>
                
                <div class="form-check form-switch mb-3">
                  <input class="form-check-input" type="checkbox" id="embedColor" name="embedColor" <%= settings?.embedColor ? 'checked' : '' %>>
                  <label class="form-check-label" for="embedColor">Use server color for embeds</label>
                </div>
              </div>
              
              <!-- Welcome Messages -->
              <div class="mb-4">
                <h3>Welcome Messages</h3>
                <div class="form-check form-switch mb-3">
                  <input class="form-check-input" type="checkbox" id="welcomeEnabled" name="welcomeEnabled" <%= settings?.welcome?.enabled ? 'checked' : '' %>>
                  <label class="form-check-label" for="welcomeEnabled">Enable welcome messages</label>
                </div>
                
                <div class="mb-3">
                  <label for="welcomeChannel" class="form-label">Welcome Channel</label>
                  <select class="form-select" id="welcomeChannel" name="welcomeChannel">
                    <option value="">Select a channel</option>
                    <% guild.channels.cache.filter(c => c.isTextBased() && c.type !== 4).forEach(channel => { %>
                      <option value="<%= channel.id %>" <%= settings?.welcome?.channelId === channel.id ? 'selected' : '' %>><%= channel.name %></option>
                    <% }); %>
                  </select>
                </div>
                
                <div class="mb-3">
                  <label for="welcomeMessage" class="form-label">Welcome Message</label>
                  <textarea class="form-control" id="welcomeMessage" name="welcomeMessage" rows="3" placeholder="Welcome {user} to {server}!"><%= settings?.welcome?.message || '' %></textarea>
                  <div class="form-text">
                    Available placeholders:<br>
                    {user} - Mentions the user<br>
                    {username} - User's username<br>
                    {server} - Server name<br>
                    {memberCount} - Current member count
                  </div>
                </div>
              </div>
              
              <!-- Moderation Settings -->
              <div class="mb-4">
                <h3>Moderation</h3>
                <div class="form-check form-switch mb-3">
                  <input class="form-check-input" type="checkbox" id="automodEnabled" name="automodEnabled" <%= settings?.automod?.enabled ? 'checked' : '' %>>
                  <label class="form-check-label" for="automodEnabled">Enable auto-moderation</label>
                </div>
                
                <div class="mb-3">
                  <label for="logChannel" class="form-label">Moderation Log Channel</label>
                  <select class="form-select" id="logChannel" name="logChannel">
                    <option value="">Select a channel</option>
                    <% guild.channels.cache.filter(c => c.isTextBased() && c.type !== 4).forEach(channel => { %>
                      <option value="<%= channel.id %>" <%= settings?.moderation?.logChannelId === channel.id ? 'selected' : '' %>><%= channel.name %></option>
                    <% }); %>
                  </select>
                </div>
                
                <div class="form-check form-switch mb-3">
                  <input class="form-check-input" type="checkbox" id="filterEnabled" name="filterEnabled" <%= settings?.automod?.filterEnabled ? 'checked' : '' %>>
                  <label class="form-check-label" for="filterEnabled">Enable word filtering</label>
                </div>
                
                <div class="mb-3">
                  <label for="filteredWords" class="form-label">Filtered Words</label>
                  <textarea class="form-control" id="filteredWords" name="filteredWords" rows="3" placeholder="One word per line"><%= settings?.automod?.filteredWords?.join('\n') || '' %></textarea>
                </div>
              </div>
              
              <button type="submit" class="btn btn-primary">Save Settings</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.getElementById('settingsForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Collect form data
      const formData = new FormData(this);
      const settings = {
        prefix: formData.get('prefix'),
        deleteCommands: formData.get('deleteCommands') === 'on',
        embedColor: formData.get('embedColor') === 'on',
        welcome: {
          enabled: formData.get('welcomeEnabled') === 'on',
          channelId: formData.get('welcomeChannel'),
          message: formData.get('welcomeMessage')
        },
        automod: {
          enabled: formData.get('automodEnabled') === 'on',
          filterEnabled: formData.get('filterEnabled') === 'on',
          filteredWords: formData.get('filteredWords').split('\n').filter(word => word.trim().length > 0)
        },
        moderation: {
          logChannelId: formData.get('logChannel')
        }
      };
      
      // Send settings to API
      fetch('/api/servers/<%= guild.id %>/settings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(settings)
      })
      .then(response => {
        if (response.ok) {
          return response.json();
        }
        throw new Error('Failed to save settings');
      })
      .then(data => {
        alert('Settings saved successfully!');
      })
      .catch(error => {
        alert('Error: ' + error.message);
      });
    });
  </script>
</body>
</html>
