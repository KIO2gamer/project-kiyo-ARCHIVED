<%- include('../layout', { title: 'Settings - Project Kiyo Dashboard' }) %>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-cog me-2"></i>Bot Settings</h2>
    <button class="btn btn-success" id="save-all-settings">
        <i class="fas fa-save me-2"></i>Save All Changes
    </button>
</div>

<div class="row">
    <!-- General Settings -->
    <div class="col-lg-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-robot me-2"></i>General Settings</h5>
            </div>
            <div class="card-body">
                <form id="general-settings-form">
                    <div class="mb-3">
                        <label for="bot-prefix" class="form-label">Bot Prefix</label>
                        <input type="text" class="form-control" id="bot-prefix" value="/" disabled>
                        <div class="form-text">Slash commands are used - prefix is for display only</div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="bot-status" class="form-label">Bot Status</label>
                        <select class="form-select" id="bot-status">
                            <option value="online">Online</option>
                            <option value="idle">Idle</option>
                            <option value="dnd">Do Not Disturb</option>
                            <option value="invisible">Invisible</option>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label for="bot-activity" class="form-label">Bot Activity</label>
                        <input type="text" class="form-control" id="bot-activity" placeholder="Playing with Discord.js">
                    </div>
                    
                    <div class="mb-3">
                        <label for="activity-type" class="form-label">Activity Type</label>
                        <select class="form-select" id="activity-type">
                            <option value="Playing">Playing</option>
                            <option value="Streaming">Streaming</option>
                            <option value="Listening">Listening to</option>
                            <option value="Watching">Watching</option>
                            <option value="Competing">Competing in</option>
                        </select>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Moderation Settings -->
    <div class="col-lg-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-shield-alt me-2"></i>Moderation Settings</h5>
            </div>
            <div class="card-body">
                <form id="moderation-settings-form">
                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="auto-mod-enabled">
                            <label class="form-check-label" for="auto-mod-enabled">
                                Enable Auto-Moderation
                            </label>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="mod-log-channel" class="form-label">Moderation Log Channel</label>
                        <select class="form-select" id="mod-log-channel">
                            <option value="">Select a channel...</option>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label for="default-timeout" class="form-label">Default Timeout Duration (minutes)</label>
                        <input type="number" class="form-control" id="default-timeout" value="10" min="1" max="40320">
                    </div>
                    
                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="delete-mod-commands">
                            <label class="form-check-label" for="delete-mod-commands">
                                Auto-delete moderation commands
                            </label>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Leveling System -->
    <div class="col-lg-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-trophy me-2"></i>Leveling System</h5>
            </div>
            <div class="card-body">
                <form id="leveling-settings-form">
                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="leveling-enabled" checked>
                            <label class="form-check-label" for="leveling-enabled">
                                Enable Leveling System
                            </label>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="xp-per-message" class="form-label">XP per Message</label>
                        <input type="number" class="form-control" id="xp-per-message" value="15" min="1" max="100">
                    </div>
                    
                    <div class="mb-3">
                        <label for="level-up-channel" class="form-label">Level Up Announcements</label>
                        <select class="form-select" id="level-up-channel">
                            <option value="dm">Direct Message</option>
                            <option value="same">Same Channel</option>
                            <option value="">Disabled</option>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="level-roles-enabled">
                            <label class="form-check-label" for="level-roles-enabled">
                                Enable Level Roles
                            </label>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- YouTube Subscriber Roles -->
    <div class="col-lg-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fab fa-youtube me-2"></i>YouTube Subscriber Roles</h5>
            </div>
            <div class="card-body">
                <form id="youtube-settings-form">
                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="youtube-roles-enabled">
                            <label class="form-check-label" for="youtube-roles-enabled">
                                Enable YouTube Subscriber Roles
                            </label>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="youtube-api-status" class="form-label">API Status</label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fas fa-circle text-success" id="youtube-status-icon"></i>
                            </span>
                            <input type="text" class="form-control" id="youtube-api-status" value="Connected" readonly>
                            <button class="btn btn-outline-secondary" type="button" id="test-youtube-api">
                                <i class="fas fa-sync-alt"></i> Test
                            </button>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Subscriber Tiers</label>
                        <div id="subscriber-tiers">
                            <!-- Dynamic tier list will be loaded here -->
                        </div>
                        <button type="button" class="btn btn-sm btn-outline-primary" id="add-tier">
                            <i class="fas fa-plus me-1"></i>Add Tier
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- API Configuration -->
    <div class="col-lg-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-plug me-2"></i>API Configuration</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Google Gemini AI</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-circle text-success" id="gemini-status-icon"></i>
                        </span>
                        <input type="text" class="form-control" value="Connected" readonly>
                    </div>
                </div>
                
                <div class="mb-3">
                    <label class="form-label">Weather API</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-circle text-warning" id="weather-status-icon"></i>
                        </span>
                        <input type="text" class="form-control" value="Not Configured" readonly>
                    </div>
                </div>
                
                <div class="mb-3">
                    <label class="form-label">Google Translate</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-circle text-success" id="translate-status-icon"></i>
                        </span>
                        <input type="text" class="form-control" value="Connected" readonly>
                    </div>
                </div>
                
                <button type="button" class="btn btn-outline-primary btn-sm" id="test-all-apis">
                    <i class="fas fa-sync-alt me-1"></i>Test All APIs
                </button>
            </div>
        </div>
    </div>

    <!-- Logging Settings -->
    <div class="col-lg-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-file-alt me-2"></i>Logging Settings</h5>
            </div>
            <div class="card-body">
                <form id="logging-settings-form">
                    <div class="mb-3">
                        <label for="log-level" class="form-label">Log Level</label>
                        <select class="form-select" id="log-level">
                            <option value="ERROR">Error</option>
                            <option value="WARN">Warning</option>
                            <option value="INFO" selected>Info</option>
                            <option value="DEBUG">Debug</option>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="log-to-file">
                            <label class="form-check-label" for="log-to-file">
                                Log to File
                            </label>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="log-commands" checked>
                            <label class="form-check-label" for="log-commands">
                                Log Command Usage
                            </label>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="log-errors" checked>
                            <label class="form-check-label" for="log-errors">
                                Log Errors
                            </label>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Success/Error Messages -->
<div id="settings-alerts"></div>

<script>
// Settings page JavaScript
document.addEventListener('DOMContentLoaded', function() {
    loadCurrentSettings();
    setupEventListeners();
});

function loadCurrentSettings() {
    // Load current bot settings from API
    fetch('/api/settings')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                populateSettings(data.settings);
            }
        })
        .catch(error => {
            console.error('Error loading settings:', error);
            showAlert('Error loading current settings', 'danger');
        });
}

function populateSettings(settings) {
    // Populate form fields with current settings
    if (settings.general) {
        document.getElementById('bot-status').value = settings.general.status || 'online';
        document.getElementById('bot-activity').value = settings.general.activity || '';
        document.getElementById('activity-type').value = settings.general.activityType || 'Playing';
    }
    
    if (settings.moderation) {
        document.getElementById('auto-mod-enabled').checked = settings.moderation.autoMod || false;
        document.getElementById('default-timeout').value = settings.moderation.defaultTimeout || 10;
        document.getElementById('delete-mod-commands').checked = settings.moderation.deleteCommands || false;
    }
    
    if (settings.leveling) {
        document.getElementById('leveling-enabled').checked = settings.leveling.enabled !== false;
        document.getElementById('xp-per-message').value = settings.leveling.xpPerMessage || 15;
        document.getElementById('level-up-channel').value = settings.leveling.levelUpChannel || 'dm';
        document.getElementById('level-roles-enabled').checked = settings.leveling.levelRoles || false;
    }
    
    if (settings.youtube) {
        document.getElementById('youtube-roles-enabled').checked = settings.youtube.enabled || false;
        loadSubscriberTiers(settings.youtube.tiers || []);
    }
    
    if (settings.logging) {
        document.getElementById('log-level').value = settings.logging.level || 'INFO';
        document.getElementById('log-to-file').checked = settings.logging.toFile || false;
        document.getElementById('log-commands').checked = settings.logging.commands !== false;
        document.getElementById('log-errors').checked = settings.logging.errors !== false;
    }
}

function setupEventListeners() {
    // Save all settings button
    document.getElementById('save-all-settings').addEventListener('click', saveAllSettings);
    
    // Test API buttons
    document.getElementById('test-youtube-api').addEventListener('click', testYouTubeAPI);
    document.getElementById('test-all-apis').addEventListener('click', testAllAPIs);
    
    // Add tier button
    document.getElementById('add-tier').addEventListener('click', addSubscriberTier);
}

function saveAllSettings() {
    const settings = {
        general: {
            status: document.getElementById('bot-status').value,
            activity: document.getElementById('bot-activity').value,
            activityType: document.getElementById('activity-type').value
        },
        moderation: {
            autoMod: document.getElementById('auto-mod-enabled').checked,
            defaultTimeout: parseInt(document.getElementById('default-timeout').value),
            deleteCommands: document.getElementById('delete-mod-commands').checked,
            logChannel: document.getElementById('mod-log-channel').value
        },
        leveling: {
            enabled: document.getElementById('leveling-enabled').checked,
            xpPerMessage: parseInt(document.getElementById('xp-per-message').value),
            levelUpChannel: document.getElementById('level-up-channel').value,
            levelRoles: document.getElementById('level-roles-enabled').checked
        },
        youtube: {
            enabled: document.getElementById('youtube-roles-enabled').checked,
            tiers: getSubscriberTiers()
        },
        logging: {
            level: document.getElementById('log-level').value,
            toFile: document.getElementById('log-to-file').checked,
            commands: document.getElementById('log-commands').checked,
            errors: document.getElementById('log-errors').checked
        }
    };
    
    fetch('/api/settings', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(settings)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showAlert('Settings saved successfully!', 'success');
        } else {
            showAlert('Error saving settings: ' + data.error, 'danger');
        }
    })
    .catch(error => {
        console.error('Error saving settings:', error);
        showAlert('Error saving settings', 'danger');
    });
}

function testYouTubeAPI() {
    const button = document.getElementById('test-youtube-api');
    const icon = button.querySelector('i');
    
    button.disabled = true;
    icon.className = 'fas fa-spinner fa-spin';
    
    fetch('/api/test/youtube')
        .then(response => response.json())
        .then(data => {
            const statusIcon = document.getElementById('youtube-status-icon');
            const statusInput = document.getElementById('youtube-api-status');
            
            if (data.success) {
                statusIcon.className = 'fas fa-circle text-success';
                statusInput.value = 'Connected';
                showAlert('YouTube API test successful!', 'success');
            } else {
                statusIcon.className = 'fas fa-circle text-danger';
                statusInput.value = 'Error: ' + data.error;
                showAlert('YouTube API test failed: ' + data.error, 'danger');
            }
        })
        .catch(error => {
            console.error('Error testing YouTube API:', error);
            showAlert('Error testing YouTube API', 'danger');
        })
        .finally(() => {
            button.disabled = false;
            icon.className = 'fas fa-sync-alt';
        });
}

function testAllAPIs() {
    const button = document.getElementById('test-all-apis');
    button.disabled = true;
    button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Testing...';
    
    fetch('/api/test/all')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert('All API tests completed. Check individual status indicators.', 'info');
                // Update status indicators based on results
                updateAPIStatus(data.results);
            } else {
                showAlert('Error testing APIs: ' + data.error, 'danger');
            }
        })
        .catch(error => {
            console.error('Error testing APIs:', error);
            showAlert('Error testing APIs', 'danger');
        })
        .finally(() => {
            button.disabled = false;
            button.innerHTML = '<i class="fas fa-sync-alt me-1"></i>Test All APIs';
        });
}

function updateAPIStatus(results) {
    // Update status indicators based on API test results
    Object.keys(results).forEach(api => {
        const statusIcon = document.getElementById(`${api}-status-icon`);
        if (statusIcon) {
            statusIcon.className = results[api].success ? 
                'fas fa-circle text-success' : 
                'fas fa-circle text-danger';
        }
    });
}

function loadSubscriberTiers(tiers) {
    const container = document.getElementById('subscriber-tiers');
    container.innerHTML = '';
    
    tiers.forEach((tier, index) => {
        addTierElement(tier, index);
    });
}

function addSubscriberTier() {
    const tier = {
        subscribers: 1000,
        roleId: '',
        roleName: 'Subscriber Role'
    };
    
    const container = document.getElementById('subscriber-tiers');
    const index = container.children.length;
    addTierElement(tier, index);
}

function addTierElement(tier, index) {
    const container = document.getElementById('subscriber-tiers');
    const tierElement = document.createElement('div');
    tierElement.className = 'tier-item mb-2 p-2 border rounded';
    tierElement.innerHTML = `
        <div class="row align-items-center">
            <div class="col-md-4">
                <input type="number" class="form-control form-control-sm" 
                       placeholder="Subscriber count" value="${tier.subscribers}" 
                       data-field="subscribers" data-index="${index}">
            </div>
            <div class="col-md-6">
                <input type="text" class="form-control form-control-sm" 
                       placeholder="Role name" value="${tier.roleName}" 
                       data-field="roleName" data-index="${index}">
            </div>
            <div class="col-md-2">
                <button type="button" class="btn btn-sm btn-outline-danger" 
                        onclick="removeTier(this)">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
    `;
    
    container.appendChild(tierElement);
}

function removeTier(button) {
    button.closest('.tier-item').remove();
}

function getSubscriberTiers() {
    const tiers = [];
    const tierElements = document.querySelectorAll('.tier-item');
    
    tierElements.forEach(element => {
        const subscribers = element.querySelector('[data-field="subscribers"]').value;
        const roleName = element.querySelector('[data-field="roleName"]').value;
        
        if (subscribers && roleName) {
            tiers.push({
                subscribers: parseInt(subscribers),
                roleName: roleName
            });
        }
    });
    
    return tiers;
}

function showAlert(message, type) {
    const alertsContainer = document.getElementById('settings-alerts');
    const alert = document.createElement('div');
    alert.className = `alert alert-${type} alert-dismissible fade show`;
    alert.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    alertsContainer.appendChild(alert);
    
    // Auto-remove success alerts after 5 seconds
    if (type === 'success') {
        setTimeout(() => {
            if (alert.parentNode) {
                alert.remove();
            }
        }, 5000);
    }
}
</script>
                